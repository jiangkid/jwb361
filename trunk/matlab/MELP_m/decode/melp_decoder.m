% function v=melp_decoder(c) 
%clear all
%clc
%load 'dsp.mat';
global fm2 jt2 vp2 prev_scale; 
G1_1=[];
G2_1=[];
G1_2=[];
G2_2=[];

d_init; %инициализаци?начальны?услови??глобальных переменных
C=c; 
TEMPSIZE=size(C); 
FRN=TEMPSIZE(2); %числ?кадров
vg=[]; %пото?удалит?
vsig=[];%пото?удалит?
vh=[];%пото?удалит?
for i=1:FRN
    ls2=d_lsf(C(i).ls); %формирование вектор?ЛС?дл?текущего кадр?
    [G1,G2,G2pt,G2p_error]=d_gains(C(i).G,G2pt,G2p_error); 
    G1_1=[G1_1,G1];
    G2_1=[G2_1,G2];
                            % восстановление усилений
    Gno=noise_est(G1,Gno);  % Обновление адаптивной оценки уров? шума 
                            % на основе прошлого усилен?
    G1=noise_sup(G1,Gno);   % усиление дл?первог?подкадра текущего кадр?
    Gno=noise_est(G2,Gno);  % Обновление адаптивной оценки уров? шума 
                            % на основе прошлого усилен?
    G2=noise_sup(G2,Gno);   % усиление дл?второг?подкадра текущего кадр?
    G1_2=[G1_2,G1];
    G2_2=[G2_2,G2];
    
    if C(i).pitch~=0 
        fm2=FMCQ_CODEBOOK(C(i).QFM,:);  % амплитуд?фурь?спектр?
                                        % дл?текущего кадр?
        jt2=C(i).jt;            % джитте?дл?текущего кадр?
        vp2=[1,C(i).vp];        % вокализованность поло?дл?текущего кадр?
        p2=C(i).pitch;          % задержка ОТ дл?текущего кадр?
    else
        p2=0;                   % задержка ОТ дл?текущего кадр?
    end
    temp=melp_lsf2lpc(ls2);  % LSF ?LPC 
    u2=max(0,d_k1(temp)*0.5);% расчет первог?коээфициента отражени?
                             % дл?текущего кадр?
    if (p1==0)&&(p2~=0)      
        fm1=fm2;             % амплитуд?преобразован? Фурь?
                             % дл?предыдущег?кадр?
        p1=p2;               % задержка ОТ дл?предыдущег?кадр?
        jt1=jt2;             % джитте?дл?предыдущег?кадр?
        vp1=vp2;             % вокализованность поло?дл?предыдущег?кадр?
    end
    if t0>1  % вспомогательна?величина, опреде?ющ? номе?первог?отсчет?
             % ?восстанавливаемо?сигнал?на интервал?равном ОТ
       sig_fr=sig_fr(181:t0+179);  % сигнал на вход?дисперсионного фильтр?
    else
    sig_fr=[];                     % начальны?услови?t0=1
    end
    while t0<181    % процес?дл?каждог?период?ОТ
        e=0;     % смешанны?сигнал возбуждени?
        g=0;     % сигнал на выходе блок?адаптивной спектральной коррекци?
        h=0;     % сигнал на выходе синтезирующего фильтр?
        % Восстановление сигнал?на период?ОТ
        % интерпол?? параметров
        if p2==0            % если текущи?кадр невокализованный (unvoiced)
                            % (задержка ОТ равн?0) 
            T=50;           % задержке ОТ присваиваетс?значение 50
            factor=t0/180;  % коэффициен? учитывающи?числ?периодов ОТ 
                            % ?восстанавливаемо?кадр?
            if t0<91        % если обрабатывает? первый подкад?
                G=G2p+2*factor*(G1-G2p);    % интерпол?? усилен? 
                                            % дл?первог?подкадра (0~90) 
            else
                G=G1+(2*factor-1)*(G2-G1);  % интерпол?? усилен? 
                                            % дл?второг?подкадра (91~180)
            end
            if i==1                         % дл?первог?кадр?
                lsfs=ls2;                   % используют? прин?ые ЛС?
            else                            % дл?последующи?
                lsfs=factor*(ls2-ls1)+ls1;  % ЛС?интерполируютс?
            end
            u=factor*(u2-u1)+u1;            % интерпол?? коэффициента 
                                            % отражени??
        else                                % если текущи?кадр 
                                            % вокализованный (voiced) 
            factor=t0/180;    % коэффициен? учитывающи?числ?периодов ОТ 
                              % ?восстанавливаемо?кадр?
            jt=factor*(jt2-jt1)+jt1;  % интерпол?? джиттера
            fm=factor*(fm2-fm1)+fm1;  % интерпол?? амплитуд фурь?спектр?
            vp=factor*(vp2-vp1)+vp1;  % интерпол?? вокализованности поло?
            if t0<91 
                G=G2p+factor*(G1-G2p)/90;   % интерпол?? усилен? 
                                            % дл?первог?подкадра 
            else
                G=G1+factor*(G2-G1)/90;     % интерпол?? усилен? 
                                            % дл?второг?подкадра 
            end
            if G2-G2p>6     % если разниц??величине усилен? дл?второг?
                            % подкадра текущего ?предыдущег?кадр?боле?6
                factor=(G-G2p)/(G2-G2p);    % перерасчет коэффициента
            end
            if i==1                         % дл?первог?кадр?
                lsfs=ls2;                   % используют? прин?ые ЛС?
            else                            % дл?последующи?
                lsfs=factor*(ls2-ls1)+ls1;  % ЛС?интерполируютс?
            end
            T=factor*(p2-p1)+p1;        % интерпол?? значен? задержки ОТ
            u=factor*(u2-u1)+u1;        % интерпол?? коэффициента 
                                        % отражени??
            if ((G1-G2p)>6)&&(p1>2*p2)  % если значение усилен? дл?1-го
                                        % подкадра текущего кадр?на 6 
                                        % больше усилен? дл?предыдущег?
                                        % кадр??значение задержки ОТ
                                        % боле?че??2 раза значение
                T=p2;                   % задержки не интерполируетс?
            end
        end
        if p2==0                % если значение задержки ОТ равн?0
            e=rand(1,T)-1;      % сигнал возбуждени?формируетс?
                                % генераторо?случайны?чисе?
        else
           [e,state_pul,state_noi,T]=d_mix(fm,T,jt,vp,state_pul,state_noi);
                                % формируетс?смешанны?сигнал возбуждени?
        end
        lpcs=melp_lsf2lpc(lsfs);        % LSF ?LPC
        [g,state_ase,state_tilt]=d_ase(e,lpcs,G,Gno,u,T,...
            state_ase,state_tilt);      % адаптивн? спектральн? коррекци?
        vg=[vg,g];
        [h,state_syn]=d_lps(lpcs,g,T,state_syn); % синтез РС
        vh=[vh,h];
        [h,prev_scale]=d_ga(h,G,prev_scale,T);
                                        % усиление синтезированог?сигнал?
        prev_sc(i,t0)=prev_scale;
        sig_fr=[sig_fr,h];
        t0=t0+T;     % перехо??следующему период?ОТ на интервал?синтез?
    end 
    vsig=[vsig,sig_fr];
    [temp,state_disp]=d_disp(sig_fr,state_disp,disperse); 
                    % импульсный дисперсионны?фильтр
    v=[v,temp];     % синтезированны?речево?сигнал
    G2p=G2;         % усиление дл?второг?подкадра предыдущег?кадр?
    ls1=ls2;        % формирование вектор?ЛС?дл?предыдущег?кадр?
    u1=u2;          % коэффициен?отражени?дл?предыдущег?кадр?
    t0=t0-180; 
    if p2~=0 
        p1=p2;      % задержка ОТ дл?предыдущег?кадр?
        fm1=fm2;    % амплитуд?преобразован? Фурь?дл?предыдущег?кадр?
        jt1=jt2;    % джитте?дл?предыдущег?кадр?
    end 
end
S=v/32767^2;          % синтезированны?речево?сигнал
soundsc(v, 8000);